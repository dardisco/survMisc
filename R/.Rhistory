library(survival)
library(gam)
gfit <- gam::gam(Ozone ~ s(Temp) + s(Wind), data=airquality)
gfit
ls()
gfit <- fit
fit <- gfit
Terms
m
fit
fit
str(fit)
m
)
Terms
f1
fir
fit
m
Terms
fit
str(fit)
m
str(m)
is.call(m)
is.formula(m)
m$formula
m$formula[1]
m$formula[2]
m$formula[3]
fit
model.frame(fit)
model.frame(fit)[2]
model.frame(fit)[2]==airquality$Temp
airquality
data
data()
search()
data
m
names(data)
data[,2]==airquality$Temp
environment(airquality)
environment(sys.parent)
data
keep
names(fit$call)
names(fit$call)[3]
fit$call[3]
fit$call$data
environment(fit$call[3])
typeof(fit$call[3])
eval(fit$call[3])
airquality
do.call(eval,fit$call[3])
do.call(eval,list(fit$call[3]))
do.call(eval,list(fit$call[3]))
eval(airquality)
do.call(eval,list(as.character(fit$call[3])))
eval(list(as.character(fit$call[3])))
eval(as.character(fit$call[3]))
str(fit$call[3])
str(fit$call[[3]])
eval(fit$call[[3]])
data
data
m
typeof(m)
envir(eval(fit$call[[3]]))
environment(eval(fit$call[[3]]))
f1
Terms
fit
f1
link
tmean
nterm
i
i=1
xx1
k
vnames
Terms
Terms2
Terms2
xx2
keep
outlist
data
gamTerms(fit)
length(airquality$Wind)
air
data(air)
c1
ls()
air
names(air)
temp
?matplot
?axis
rug
fit
term
term=1
names(temp)
se=TRUE
names(temp)
match("constant",temp )
match("constant",names(temp) )
fit
f1
f1
gamterms(f1)
gamTerms(f1)
f1$formula
 str(f1)
formula(f1)
f1$call
f1$call$data
fit
formula(fit)
Terms
gamTerms(f1)
gamTerms(f1)
f1$family
family(f1)
family(fit)
temp
fit
class(fit)
p=0.95
ci
class(g1)
all.vars(f1)
all.vars(g1)
all.vars(fit(g1))
all.vars(formula(g1))
g1 <- gam(formula = Ozone + Temp ~ s(Temp) + s(Wind), data = airquality)
g1
all.vars(formula(g1))
g1
fit
plotTerm(fit)
getwd()
source("mulPlot.R")
source("multPlot.R")
plotTerm(fit)
plotTerm(fit)
fit
f2$coef
f2$coef
names(pbc)
predict(f2,type="terms")
str(f2)
f2
survival::predict.coxph()
survival:::predict.coxph()
termplot
?plotterm
f2
f2
fit <- f2
Terms
keep
data
fit
fit <- f2
fit$na.action
temp
?predict.coxph
termpf2 <- termp
fit <- f3
termp==termpf2
typeof(termp)
termp[[1]]==termpf2[[1]]
termp[[1]]
str(termp)
)
)
)
length(foo)
fr
terms(fr)
terms(ff)
terms(ff2)
)
terms(ff)
ff
names(fr)
textus
data
a1
sum(a1)
?sum
sum(integer(a1))
integer(a1)
as.integer(a1)
sum(as.integer(a1))
sum(as.numeric(a1))
df1
sum(df1[,1])
sum(as.integer(df1[,1]))
sum(as.numeric(df1[,1]))
summary(as.numeric(df1[,1]))
library(survMisc)
ls(package:survMisc)
install.packages(survMisc)
install.packages(survMisc)
install.packages("survMisc")
detach(package:survMisc)
search()
install.packages("survMisc")
ls(package:survMisc)
library(survMisc)
ls(package:survMisc)
search()
detach(package:survMisc)
search()
quantile()
quantile
rm(quantile)
quantile
getwd()
setwd("c:/Users/c/Documents/ATRT/")
getwd()
getwd()
setwd("c:/Users/c/Documents/ATRT/survMisc/data")
load(air)
ls()
dir()
load(air.rda)
load("air.rda")
ls()
pairs(air)
rm(air)
ls()
data(air)
data("air")
data("air.rda")
dir()
require(Matrix)
lu
showMethods("lu")
?SetMethod
quantile
setMethod("quantile", signature=)
library(devtools)
detach(package:devtools)
search()
library(devtools)
search()
getwd()
setwd("c:/Users/c/Documents/ATRT")
insatll.local("survMisc" )
install.local("survMisc")
install_local("survMisc")
search()
library(survMisc)
quantile
quantile.Surv()
q()
